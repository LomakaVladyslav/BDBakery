// <auto-generated />
using System;
using Cooking.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cooking.Migrations
{
    [DbContext(typeof(CookingAPIContext))]
    [Migration("20240517181823_Fix1Tables")]
    partial class Fix1Tables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cooking.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("adress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Cooking.Models.AuthorReciept", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("RecieptId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("RecieptId");

                    b.ToTable("AuthorReciepts");
                });

            modelBuilder.Entity("Cooking.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Cooking.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Cooking.Models.Reciept", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Ingridients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CountryId");

                    b.HasIndex("TypeId");

                    b.ToTable("Reciepts");
                });

            modelBuilder.Entity("Cooking.Models.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("Cooking.Models.AuthorReciept", b =>
                {
                    b.HasOne("Cooking.Models.Author", "Author")
                        .WithMany("AuthorReciept")
                        .HasForeignKey("AuthorId");

                    b.HasOne("Cooking.Models.Reciept", "Reciept")
                        .WithMany("AuthorReciept")
                        .HasForeignKey("RecieptId");

                    b.Navigation("Author");

                    b.Navigation("Reciept");
                });

            modelBuilder.Entity("Cooking.Models.Reciept", b =>
                {
                    b.HasOne("Cooking.Models.Category", "Category")
                        .WithMany("Reciept")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cooking.Models.Country", "Country")
                        .WithMany("Reciept")
                        .HasForeignKey("CountryId");

                    b.HasOne("Cooking.Models.Type", "Type")
                        .WithMany("Reciept")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Country");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Cooking.Models.Author", b =>
                {
                    b.Navigation("AuthorReciept");
                });

            modelBuilder.Entity("Cooking.Models.Category", b =>
                {
                    b.Navigation("Reciept");
                });

            modelBuilder.Entity("Cooking.Models.Country", b =>
                {
                    b.Navigation("Reciept");
                });

            modelBuilder.Entity("Cooking.Models.Reciept", b =>
                {
                    b.Navigation("AuthorReciept");
                });

            modelBuilder.Entity("Cooking.Models.Type", b =>
                {
                    b.Navigation("Reciept");
                });
#pragma warning restore 612, 618
        }
    }
}
